/**
 * Browser environment implementation for ConsoleUI.
 *
 * This module provides styling capabilities for console output in browser environments.
 * It exports style functions that generate tagged strings and a log function that processes
 * these tags to display styled console output.
 *
 * Important: Style functions do not directly style the console output. Instead, they
 * generate strings with special style tags. These tagged strings must be passed to
 * the `log` function to display the styled output in the console.
 *
 * @example
 * ```typescript
 * import { red, blue, makeStyle, log } from '@franvena/consoleui/browser';
 *
 * // Incorrect: This will show the raw tagged string
 * console.log(red('Error message'));
 *
 * // Correct: Using log function to process and display styled text
 * log(red('Error message'));
 *
 * // Multiple styles in one log
 * log(red('Error: ') + blue('Something went wrong'));
 *
 * // Custom styles
 * const warning = makeStyle({ color: 'yellow' });
 * log(warning('Warning message'));
 * ```
 *
 * @throws TypeError When imported in a Node.js environment instead of a browser
 */

import { createConsoleUI } from "../core/factory-console-ui";
import { createStyle, makeStyle as makeStyle_ } from "./style-browser";

/**
 * Runtime environment verification.
 * Ensures the module is being used in a browser environment.
 *
 * @throws TypeError When used outside a browser environment
 */
// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition -- Check in time of execution
if (!(globalThis.window && globalThis.document)) {
  throw new TypeError(
    'You are trying to use Browser styles in a Node.js environment. For Node.js environment, use "@franvena/consoleui/terminal" instead.',
  );
}

/**
 * Creates the ConsoleUI instance configured for browser environment
 */
const consoleUI = createConsoleUI(createStyle, makeStyle_);
const api = consoleUI();

export default api;
export { consoleUI };

/**
 * Pre-configured color style functions.
 * Each function generates a string with special style tags that must be processed
 * by the `log` function to display styled output.
 *
 * Important: Do not use console.log directly with these functions. Always use the
 * exported `log` function to display styled text.
 *
 * @example
 * ```typescript
 * import { red, blue, green, log } from '@franvena/consoleui/browser';
 *
 * // Single style
 * log(red('Error'));
 *
 * // Combining styles
 * log(red('Error: ') + blue('Details'));
 *
 * // Nested content
 * log(green('Success: ' + blue('Operation completed')));
 * ```
 */
export const {
  bgBlack,
  bgBlackBright,
  bgBlue,
  bgBlueBright,
  bgCyan,
  bgCyanBright,
  bgGray,
  bgGreen,
  bgGreenBright,
  bgMagenta,
  bgMagentaBright,
  bgRed,
  bgRedBright,
  bgWhite,
  bgWhiteBright,
  bgYellow,
  bgYellowBright,
  black,
  blackBright,
  blue,
  blueBright,
  cyan,
  cyanBright,
  gray,
  green,
  greenBright,
  magenta,
  magentaBright,
  makeStyle,
  red,
  redBright,
  white,
  whiteBright,
  yellow,
  yellowBright,
} = api;

/**
 * Processes and displays styled text in the console.
 * This function is required to display any styled text generated by the style functions.
 * It processes the style tags and applies the corresponding CSS styles in the browser console.
 *
 * Important: Always use this function instead of console.log to display styled text.
 * The style functions generate tagged strings that only work with this log function.
 *
 * @example
 * ```typescript
 * import { red, blue, log } from '@franvena/consoleui/browser';
 *
 * // Basic usage
 * log(red('Error message'));
 *
 * // Combining multiple styles
 * log(red('Error: ') + blue('Details here'));
 *
 * // Raw style tags (advanced usage)
 * log('__STYLE_RED__Error__STYLE_RESET__');
 *
 * // Multiple styles with nesting
 * log(red('Error: ' + blue('Critical') + ' issue'));
 * ```
 */
export { log } from "./style-browser";
